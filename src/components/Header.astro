---
import HeaderLink from "./HeaderLink.astro";
import { SITE_TITLE } from "../consts";

import type { HTMLAttributes } from "astro/types";

// type Props = HTMLAttributes<"a">;

// const { href, class: className, ...props } = Astro.props;

const { pathname } = Astro.url;
const subpath = pathname.match(/[^\/]+/g);

const isActive = (href: string) => {
	return href === pathname || href === "/" + subpath?.[0];
};

// = href === pathname || href === "/" + subpath?.[0];
---

<header
	class="md:px-8 z-10 backdrop-blur-md px-4 md:py-2 py-4 relative bg-white md:bg-transparent"
	transition:persist
>
	<nav
		class="container max-w-full mx-auto flex justify-between items-center font-medium text-base"
	>
		<h2 class="text-2xl w-1/4 hidden md:block">
			<a href="/">{SITE_TITLE}</a>
		</h2>
		<div
			class="hidden md:flex px-8 md:flex-row md:items-center md:gap-1 rounded-3xl border border-gray-300/50 shadow-md"
			id="tab-container"
		>
			<div
				class="internal-links flex flex-row items-center gap-1 relative text-center"
			>
				<div
					class:list={[
						"tab",
						"px-1",
						{
							active: isActive("/"),
						},
					]}
				>
					<a href="/" class="block">首页</a>
				</div>
				<div
					class:list={[
						"tab",
						"px-1",
						{
							active: isActive("/blog"),
						},
					]}
				>
					<a href="/blog" class="block">博客</a>
				</div>
				<div
					class:list={[
						"tab",
						"px-1",
						{
							active: isActive("/tags"),
						},
					]}
				>
					<a href="/tags" class="block">标签</a>
				</div>
				<div
					class:list={[
						"tab",
						"px-1",
						{
							active: isActive("/about"),
						},
					]}
				>
					<a href="/about" class="block">关于</a>
				</div>

				<div
					class="absolute -bottom-px bg-gradient-to-r from-transparent via-teal-500/70 to-transparent h-px rounded-full opacity-80"
					id="indicator"
				>
				</div>
			</div>
		</div>
		<!-- 响应式菜单 -->
		<div
			id="responsive-menu"
			class="md:hidden z-20 absolute top-16 right-0 flex flex-col items-center gap-4 bg-white p-2 transition-transform origin-center"
		>
			<HeaderLink href="/">首页</HeaderLink>
			<HeaderLink href="/blog">博客</HeaderLink>
			<HeaderLink href="/tags">标签</HeaderLink>
			<HeaderLink href="/about">关于</HeaderLink>
		</div>

		<div class="hidden md:flex w-1/4 justify-end">
			<a href="https://github.com/ghzha" target="_blank" class="flex">
				<svg
					xmlns="http://www.w3.org/2000/svg"
					width="32"
					height="32"
					viewBox="0 0 24 24"
					><path
						d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"
					></path></svg
				>
			</a>
		</div>
		<h2 class="md:hidden text-2xl"><a href="/">{SITE_TITLE}</a></h2>
		<div class="md:hidden flex">
			<button id="menu-toggle" class="text-black focus:outline-none">
				<svg
					xmlns="http://www.w3.org/2000/svg"
					viewBox="0 0 24 24"
					class="h-8 w-8 fill-current"
					><path d="M4 18h16v-2H4v2zm0-5h16v-2H4v2zm0-7v2h16V6H4z"
					></path></svg
				>
			</button>
		</div>
	</nav>
</header>

<style>
	header {
		box-sizing: border-box;
		margin: 0;
		width: 100%;
		top: 0;
		position: sticky;
	}
	h2 {
		margin: 0;
	}

	h2 a,
	h2 a.active {
		text-decoration: none;
	}

	nav a {
		padding: 0.5rem 0.5rem;
		color: var(--black);
		text-decoration: none;
	}

	.tab.active a {
		color: #14b8a6;
	}
</style>

<script>
	// responsive menu
	const menuToggle = document.getElementById("menu-toggle");
	const responsiveMenu = document.getElementById("responsive-menu");
	if (menuToggle && responsiveMenu) {
		responsiveMenu.classList.add("hidden");
		menuToggle.addEventListener("click", () => {
			responsiveMenu.classList.toggle("hidden");
		});
	}
	// Tab indicator
	const tabs = document.querySelectorAll<HTMLDivElement>(".tab");
	let indicator = document.getElementById("indicator");
	let activeTab = document.querySelector<HTMLDivElement>(".tab.active");

	tabs.forEach((tab) => {
		if (activeTab && indicator) {
			indicator.style.width = `${activeTab.offsetWidth}px`;
			indicator.style.transform = `translateX(${activeTab.offsetLeft}px)`;
		}
		tab.addEventListener("click", (e) => {
			activeTab?.classList.remove("active");
			tab.classList.add("active");

			activeTab = tab; // Update the activeTab reference

			if (indicator) {
				indicator.style.width = `${tab.offsetWidth}px`;
				indicator.style.transform = `translateX(${tab.offsetLeft}px)`;
				// indicator.style.transition = "none";
			}
		});
	});

	// Tab hover effect
	const tabContainer = document.getElementById("tab-container");
	tabContainer?.addEventListener("mousemove", (e) => {
		const rect = tabContainer.getBoundingClientRect();
		const x = e.clientX - rect.left;
		const y = e.clientY - rect.top;
		tabContainer.style.background = `radial-gradient(155px circle at ${x}px ${y}px, rgba(51,166,184,0.12) 0%, transparent 65%)`;
	});
	tabContainer?.addEventListener("mouseleave", () => {
		tabContainer.style.background = "none";
	});
</script>
