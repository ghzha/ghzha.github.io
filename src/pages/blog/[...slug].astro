---
import { type CollectionEntry, getCollection } from "astro:content";
import BlogPost from "../../layouts/BlogPost.astro";
export async function getStaticPaths() {
	const posts = await getCollection("blog");
	return posts.map((post) => ({
		params: { slug: post.slug },
		props: post,
	}));
}
type Props = CollectionEntry<"blog">;

const post = Astro.props;
const { Content } = await post.render();
---

<BlogPost {...post.data}>
	<Content />
</BlogPost>
<script>
	const copyButtonLabel = "Copy";
	const copyCodeBlocks = document.querySelectorAll("pre");
	copyCodeBlocks.forEach((codeBlock) => {
		let wrapper = document.createElement("div");
		wrapper.style.position = "relative";

		let copyButton = document.createElement("button");
		copyButton.className = "copy-code";
		copyButton.innerHTML = copyButtonLabel;

		codeBlock.setAttribute("tabindex", "0");
		codeBlock.appendChild(copyButton);
		// wrap codebock with relative parent element
		codeBlock?.parentNode?.insertBefore(wrapper, codeBlock);
		wrapper.appendChild(codeBlock);

		copyButton.addEventListener("click", async () => {
			await copyCode(codeBlock, copyButton);
		});
	});
	async function copyCode(block: HTMLPreElement, button: HTMLButtonElement) {
		const code = block.querySelector("code");
		const text = code!.innerText;

		await navigator.clipboard.writeText(text);

		button.innerText = "Copied";

		setTimeout(() => {
			button.innerText = copyButtonLabel;
		}, 700);
	}
</script>
